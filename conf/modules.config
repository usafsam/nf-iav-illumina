/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {
  withName: 'CHECK_SAMPLE_SHEET' {
    ext.args = ''
    publishDir = [
      [
        path: { "${params.tracedir}/" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
      ]
    ]
  }
  withName: 'BLAST_MAKEBLASTDB' {
    ext.args = '-dbtype nucl'
    publishDir = [
      [
        path: { "${params.outdir}/blast/db/ncbi"},
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }
  withName: 'BLAST_BLASTN.*' {
    ext.args = '-outfmt "6 qaccver saccver pident length mismatch gapopen qstart qend sstart send evalue bitscore qlen slen qcovs stitle" -num_alignments 1000000 -evalue 1e-6'
  }
  withName: 'IRMA' {
    publishDir = [
      [
        path: { "${params.outdir}/irma"},
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ],
      [
        path: { "${params.outdir}/consensus/irma/" },
        pattern: "*.consensus.fasta",
        mode: params.publish_dir_mode
      ]
    ]
  }
  withName: 'VADR' {
    ext.args = '--mkey flu -r --atgonly --xnocomp --nomisc --alt_fail extrant5,extrant3'
    publishDir = [
      [
        path: { "${params.outdir}/annotation/vadr" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
      ]
    ]
  }
  withName: 'VADR_SUMMARIZE_ISSUES' {
    ext.args = ''
    publishDir = [
      [
        path: { "${params.outdir}/annotation" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
      ]
    ]
  }
  withName: 'POST_TABLE2ASN' {
    ext.args = ''
    publishDir = [
      [
        path: { "${params.outdir}/annotation/${sample}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
      ]
    ]
  }
  withName: 'ZSTD_DECOMPRESS_.*' {
    publishDir = [
      [
        path: { "${params.outdir}/ncbi-influenza-db"},
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
        mode: params.publish_dir_mode
      ]
    ]
  }
  withName: 'MQC_VERSIONS_TABLE' {
    publishDir = [
      [
        path: { "${params.outdir}/pipeline_info" },
        pattern: "software_versions.yml",
        mode: params.publish_dir_mode
      ]
    ]
  }
}

if (params.platform == 'nanopore') {
  includeConfig 'modules_nanopore.config'
} else if (params.platform == 'illumina'){
  includeConfig 'modules_illumina.config'
}
