/*
 * -------------------------------------------------
 *  CFIA-NCFAD/nf-flu Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

params {
  // input/output params
  input                             = ''
  platform                          = 'illumina'
  outdir                            = 'results'
  ref_db                            = ''
  // IRMA options
  irma_module                       = ''
  keep_ref_deletions                = true
  skip_irma_subtyping_report        = true
  // IRMA summary options
  coverage_depth_threshold          = 25
  // H/N subtyping options
  pident_threshold                  = 0.85
  min_aln_length                    = 700
  max_top_blastn                    = 3
  // reference data
  ncbi_influenza_fasta              = 'https://api.figshare.com/v2/file/download/41415330'
  ncbi_influenza_metadata           = 'https://api.figshare.com/v2/file/download/41415333'
  // Slurm scheduler options
  slurm_queue                       = ''
  slurm_queue_size                  = 100
  // Boilerplate options
  tracedir                          = "${params.outdir}/pipeline_info"

  // Nanopore options
  min_sample_reads                  = 100

  variant_caller                    = 'clair3'
  //Medaka Variant calling parameter
  medaka_variant_model              = 'r941_prom_hac_variant_g507'
  medaka_snp_model                  = 'r941_prom_hac_snp_g507'

  //Clair3 Variant calling parameter
  clair3_variant_model              = 'r941_prom_sup_g5014'
  clair3_user_variant_model         = ''

  // Nanopore/Illumina options
  skip_mosdepth                     = false

  // variant filtering parameters
  minor_allele_fraction             = 0.25
  major_allele_fraction             = 0.75
  // consensus sequence parameters
  low_coverage                      = 10

  // VADR parameters
  vadr_model_targz = 'https://zenodo.org/records/13261208/files/vadr-models-flu-1.6.3-2.tar.gz'

  publish_dir_mode                  = 'copy'
  validate_params                   = true
  help                              = false
  monochrome_logs                   = false
  singularity_pull_docker_container = false
  show_hidden_params                = false
  schema_ignore_params              = 'modules,genomes'
}

includeConfig 'conf/base.config'

profiles {
  charliecloud {
    charliecloud.enabled   = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
  }
  conda {
    conda.enabled          = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    // Increase time available to build Conda environment
    conda.createTimeout    = "120 min"
    conda.useMamba = params.use_mamba
  }
  mamba {
    conda.enabled          = true
    conda.useMamba         = true
    docker.enabled         = false
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
    // Increase time available to build Conda environment
    conda.createTimeout    = "120 min"
  }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled         = true
    docker.userEmulation   = true
    docker.temp            = '/dev/shm'
    singularity.enabled    = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  podman {
    podman.enabled         = true
    docker.enabled         = false
    singularity.enabled    = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    docker.enabled         = false
    podman.enabled         = false
    shifter.enabled        = false
    charliecloud.enabled   = false
  }
  slurm {
    includeConfig 'conf/slurm.config'
  }
  test_illumina { includeConfig 'conf/test_illumina.config' }
  test_nanopore { includeConfig 'conf/test_nanopore.config' }
}

// Load modules.config for DSL2 module specific options
includeConfig 'conf/modules.config'


def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file    = "${params.tracedir}/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file    = "${params.tracedir}/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file    = "${params.tracedir}/execution_trace_${trace_timestamp}.txt"
}
dag {
  enabled = true
  file    = "${params.tracedir}/pipeline_dag_${trace_timestamp}.svg"
}

manifest {
  name            = 'CFIA-NCFAD/nf-flu'
  description     = 'Influenza A virus genome assembly pipeline'
  homePage        = 'https://github.com/CFIA-NCFAD/nf-flu'
  author          = 'Peter Kruczkiewicz, Hai Nguyen'
  version         = '3.4.1'
  nextflowVersion = '!>=22.10.1'
  mainScript      = 'main.nf'
  doi             = '10.5281/zenodo.7011213'
}

// Following function from https://github.com/nf-core/vipr/blob/master/nextflow.config#L88
// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
